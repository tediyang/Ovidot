const bcrypt = require("bcrypt");
const Queue = require("bull");
const dbClient = require("../utils/db");
const userUtils = require("../utils/user");

const userQueue = new Queue("userQueue");

class userController {
  
  /**
   * Creates a user using email and password
   *
   * To create a user, you must specify an email and a password
   * If the email is missing, return an error Missing email with
   * a status code 400
   * If the password is missing, return an error Missing password with
   * a status code 400
   * If the email already exists in DB, return an error Already exist with
   * a status code 400
   * The password must be stored after being hashed in SHA1
   * The endpoint is returning the new user with only the email and the id
   * (auto generated by MongoDB) with a status code 201
   * The new user must be saved in the collection users:
   * email: same as the value received
   * password: SHA1 value of the value received
   */
  static async postNew(request, response) {
    const {email, password} = request.body;
    if (!email) {
      return response.status(400).send({error: "no email entered"});
    }
    if (!password) {
      return response.status(400).send({error: "no password entered"});
    }

    const emailExist = await dbClient.userCollection.findOne({email});
    if (emailExist) {
      return response.status(400).send({error: "email already exist"});
    }

    
    /* hash password */
    try {
      const hashedPassword = await bcrypt.hash(password, 10);
      const result = await dbClient.usersCollection.insertOne({email, password: hashedPassword});
    }
    catch (err) {
      await userQueue.add({});
      return response.status(500).send({error: "error in creating user."});
    }

    const user = {
      id: result.insertedId,
      email
    };

    await userQueue.add({
      userId: result.insertedId.toString()
    });
    return response.status(201).send(user);
  }


  /**
   *
   * retrieve the user base on the token used
   * if not found return unauthorized error message
   * else return user obj
   */
  static async getMe(request, response) {
    const {userId} = await userUtils.getUserIdAndKey(request);

    const user = await userUtils.getUser({_id: objectId(userId)});

    if(!user) {
      return response.status(401).send({error: "unauthorized"});
    }

    const proccessedUser = { id: user._id, ...user };
    delete proccessedUser._id;
    delete proccessedUser.password;
    return response.status(200).send(proccessUser);
  }
}

module.exports = userController;
