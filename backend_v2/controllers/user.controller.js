const bcrypt = require("bcrypt");
const Queue = require("bull");
const userUtils = require("../utils/user");
const userQueue = new Queue("userQueue");

class UserController {
  
  /**
   * Creates a user using email and password
   *
   * To create a user, you must specify an email and a password
   * If the email is missing, return an error Missing email with
   * a status code 400
   * If the password is missing, return an error Missing password with
   * a status code 400
   * If the email already exists in DB, return an error Already exist with
   * a status code 400
   * The password must be stored after being hashed in SHA1
   * The endpoint is returning the new user with only the email and the id
   * (auto generated by MongoDB) with a status code 201
   * The new user must be saved in the collection users:
   * email: same as the value received
   * password: SHA1 value of the value received
   */
  static async postNew(request, response) {
    const { email, password } = request.body;
    if (!email) {
      return response.status(400).send({ error: "No email entered" });
    }
    if (!password) {
      return response.status(400).send({ error: "No password entered" });
    }

    try {
      /* Check if the email already exists */
      const emailExist = await user.model.findOne({ email });
      if (emailExist) {
        return response.status(400).send({ error: "Email already exists" });
      }

      /* Hash the user's password */
      const hashedPassword = await bcrypt.hash(password, 10);

      /* Create a new user document */
      const newUser = new user.model({ email, password: hashedPassword });
      await newUser.save();

      /* Prepare the user response */
      const user = {
        id: newUser._id,
        email
      };

      /* Add the user to the queue for further processing */
      await userQueue.add({
        userId: newUser._id.toString()
      });

      /* Respond with the newly created user */
      return response.status(201).send(user);
    } catch (err) {
      /* Handle errors during user creation */
      await userQueue.add({});
      return response.status(500).send({ error: "Error in creating user." });
    }
  }

  /**
   * Retrieve the user based on the token used
   * If not found, return an unauthorized error message
   * Otherwise, return the user object
   */
  static async getMe(request, response) {
    /* Get the user's ID from the token */
    const { userId } = await userUtils.getUserIdAndKey(request);

    try {
      /* Retrieve the user based on the ID */
      const user = await user.model.findById(userId);

      /* If the user is not found, return an unauthorized error */
      if (!user) {
        return response.status(401).send({ error: "Unauthorized" });
      }

      /* Prepare the user response (excluding sensitive data) */
      const processedUser = { id: user._id, email: user.email };

      /* Respond with the user's information */
      return response.status(200).send(processedUser);
    } catch (error) {
      /* Handle errors during user retrieval */
      return response.status(500).send({ error: "Error retrieving user." });
    }
  }
}

module.exports = UserController;
